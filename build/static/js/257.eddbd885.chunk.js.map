{"version":3,"file":"static/js/257.eddbd885.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts","../node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HtmlTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/text/TextStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/text/utils/generateTextStyleKey.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPluginOptions}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\n// eslint-disable-next-line max-len\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    if (!target.renderGroup)\n    {\n        bounds.applyMatrix(target.parentRenderGroup.worldTransform);\n    }\n    else\n    {\n        bounds.applyMatrix(target.renderGroup.localTransform);\n    }\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.renderGroup || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(target.parentRenderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(target.parentRenderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.renderGroup)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            location: 0,\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = colorTextureSource._resolution;\n\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for any filter, it should be true\n        let antialias = colorTextureSource.antialias;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias !== 'inherit')\n            {\n                if (filter.antialias === 'on')\n                {\n                    antialias = true;\n                }\n                else\n                {\n                    antialias = false;\n                }\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired = blendRequired || filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const viewPort = renderer.renderTarget.rootViewPort;\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        // need to factor in resolutions also..\n        bounds.scale(resolution)\n            .fitBounds(0, viewPort.width, 0, viewPort.height)\n            .scale(1 / resolution)\n            .pad(padding)\n            .ceil();\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n        // eslint-disable-next-line max-len\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        renderable.addBounds(bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","import { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst batchSamplersUniformGroupHash: Record<number, UniformGroup> = {};\n\n/**\n * Automatically generates a uniform group that holds the texture samplers for a shader.\n * This is used mainly by the shaders that batch textures!\n * @param maxTextures - the number of textures that this uniform group will contain.\n * @returns a uniform group that holds the texture samplers.\n */\nexport function getBatchSamplersUniformGroup(maxTextures: number)\n{\n    let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n\n    if (batchSamplersUniformGroup) return batchSamplersUniformGroup;\n\n    const sampleValues = new Int32Array(maxTextures);\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n        uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n    }, { isStatic: true });\n\n    return batchSamplersUniformGroup;\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const canvas = canvasAndContext.canvas;\n        const { width, height } = canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics._didGraphicsUpdate)\n        {\n            graphics._didGraphicsUpdate = false;\n\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch.batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            // TODO pool this!!\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', () =>\n            {\n                this.destroyRenderable(graphics);\n            });\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport interface MeshInstruction extends Instruction\n{\n    renderPipeId: 'mesh';\n    mesh: Mesh;\n}\n\n// eslint-disable-next-line max-len\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<MeshInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            const texture = mesh.texture;\n\n            if (batchableMesh.texture._source !== texture._source)\n            {\n                if (batchableMesh.texture._source !== texture._source)\n                {\n                    return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add({\n                renderPipeId: 'mesh',\n                mesh\n            } as MeshInstruction);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n    }\n\n    public execute({ mesh }: MeshInstruction)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', () =>\n        {\n            this.destroyRenderable(mesh);\n        });\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.mesh = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        gpuMesh.mesh = mesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import type { Batch, BatchableObject, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Container } from '../../container/Container';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements BatchableObject\n{\n    public indexStart: number;\n    public textureId: number;\n    public texture: Texture;\n    public location: number;\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public mesh: Container;\n    public geometry: MeshGeometry;\n\n    public roundPixels: 0 | 1 = 0;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.mesh.groupBlendMode; }\n\n    public reset()\n    {\n        this.mesh = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = this.geometry.indices;\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[index++] = indices[i] + indicesOffset;\n        }\n    }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const mesh = this.mesh;\n\n        const geometry = this.geometry;\n        const wt = mesh.groupTransform;\n\n        const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        // const trim = texture.trim;\n        const positions = geometry.positions;\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        const abgr = mesh.groupColorAlpha;\n\n        for (let i = 0; i < positions.length; i += 2)\n        {\n            const x = positions[i];\n            const y = positions[i + 1];\n\n            float32View[index] = (a * x) + (c * y) + tx;\n            float32View[index + 1] = (b * x) + (d * y) + ty;\n\n            // TODO implement texture matrix?\n            float32View[index + 2] = transformedUvs[i];\n            float32View[index + 3] = transformedUvs[i + 1];\n\n            uint32View[index + 4] = abgr;\n            uint32View[index + 5] = textureIdAndRound;\n\n            index += 6;\n        }\n    }\n\n    get vertexSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: NineSliceSprite, _instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        sprite._didSpriteUpdate = false;\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = new BatchableMesh();\n\n        batchableMesh.geometry = new NineSliceGeometry();\n\n        batchableMesh.mesh = sprite;\n\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(sprite);\n        });\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            // we are batching.. check a texture change!\n            if (batchableMesh && batchableMesh.texture._source !== renderable.texture._source)\n            {\n                return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n            }\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite._didTilingSpriteUpdate)\n            {\n                tilingSprite._didTilingSpriteUpdate = false;\n\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.mesh = tilingSprite;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite._didTilingSpriteUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh.batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite._didTilingSpriteUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n\n        tilingSprite._didTilingSpriteUpdate = false;\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(tilingSprite);\n        });\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite._applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    public applyFillAsTint = true;\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            // texture may not exist if the char is \" \", \\n, \\r, or \\t.\n            this.chars[i].texture?.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\n\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../text/TextStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n    textureSize?: number\n    mipmap?: boolean\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @memberof text\n * @ignore\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    public static defaultOptions: DynamicBitmapFontOptions = {\n        textureSize: 512,\n        style: new TextStyle(),\n        mipmap: true,\n    };\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 0;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n    private readonly _textureSize: number;\n    private readonly _mipmap: boolean;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = { ...DynamicBitmapFont.defaultOptions, ...options };\n\n        this._textureSize = dynamicOptions.textureSize;\n        this._mipmap = dynamicOptions.mipmap;\n\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.applyFillAsTint = dynamicOptions.overrideFill;\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        const widthScale = style.fontStyle === 'italic' ? 2 : 1;\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps heigh\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = (widthScale * metrics.width) * fontScale;\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = width + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > this._textureSize)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > this._textureSize)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n            this._textureSize,\n            this._textureSize,\n            textureResolution\n        );\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload',\n                autoGenerateMipmaps: this._mipmap,\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            // clear context.. this is the fastest way apparently!\n            // eslint-disable-next-line no-self-assign\n            canvasAndContext.canvas.width = canvasAndContext.canvas.width;\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n","import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\nexport function getBitmapTextLayout(chars: string[], style: TextStyle, font: AbstractBitmapFont<any>): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n        let lastChar = currentLine.chars[index];\n\n        while (lastChar === ' ')\n        {\n            currentLine.width -= font.chars[lastChar].xAdvance;\n            lastChar = currentLine.chars[--index];\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += font.lineHeight;\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord\n                && style.wordWrap\n                && (currentLine.width + currentWord.width - adjustedLetterSpacing) > adjustedWordWrapWidth;\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                if (currentLine.width !== 0)\n                {\n                    nextLine();\n                }\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            let key = style.styleKey;\n\n            // remove the font size..\n            key = key.substring(0, key.lastIndexOf('-'));\n\n            fontFamilyKey = `${key}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     */\n    public getLayout(text: string, style: TextStyle): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout([...text], style, bitmapFont);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     */\n    public measureText(text: string, style: TextStyle): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            Cache.remove(cacheKey);\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    // private _sdfShader: SdfShader;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        context\n            .translate(\n                (-bitmapText._anchor._x * bitmapTextLayout.width) - padding,\n                (-bitmapText._anchor._y * (bitmapTextLayout.height + bitmapTextLayout.offsetY)) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that hav the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', () =>\n        {\n            this.destroyRenderable(bitmapText);\n        });\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HtmlTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        this._gpuText[htmlText.uid] = gpuTextData;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', () =>\n        {\n            this.destroyRenderable(htmlText);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HtmlTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n\n    return {\n        width: contentBounds.width,\n        height: contentBounds.height + descenderPadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HtmlTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        image.width = width | 0;\n        image.height = height | 0;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        let resource: HTMLImageElement | HTMLCanvasElement = image;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            resource = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * This canvas is immediately returned to the CanvasPool for reuse, so use the result straight away!\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): HTMLCanvasElement\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas and context to the CanvasPool.\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n    // Return the canvas.\n    return canvasAndContext.canvas as HTMLCanvasElement;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport {\n    toFillStyle,\n    toStrokeStyle\n} from '../graphics/shared/utils/convertFillInputToFillStyle';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n    StrokeStyle\n} from '../graphics/shared/FillTypes';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * A collection of text related classes.\n * @namespace text\n */\n\n/**\n * A drop shadow effect.\n * @memberof text\n */\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: ColorSource;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances.\n * ```js\n * const textStyle = new TextStyle({\n *    fontSize: 12,\n *    fill: 'black',\n * });\n * ```\n * @see {@link text.TextStyle}\n * @memberof text\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs `wordWrap` to be set to `true` */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillInput;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: StrokeInput;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    trim?: boolean,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @memberof text\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /** The default drop shadow settings */\n    public static defaultDropShadow: TextDropShadow = {\n        /** Set alpha for the drop shadow */\n        alpha: 1,\n        /** Set a angle of the drop shadow */\n        angle: Math.PI / 6,\n        /** Set a shadow blur radius */\n        blur: 0,\n        /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n        color: 'black',\n        /** Set a distance of the drop shadow */\n        distance: 5,\n    };\n\n    /** The default text style settings */\n    public static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link TextStyle.dropShadow} */\n        dropShadow:  null,\n        /**\n         * See {@link TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link TextStyle.leading} */\n        leading: 0,\n        /** See {@link TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillInput;\n\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: StrokeInput;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    protected _styleKey: string;\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = this._createProxy({ ...TextStyle.defaultDropShadow, ...value });\n        }\n        else\n        {\n            this._dropShadow = value ? this._createProxy({ ...TextStyle.defaultDropShadow }) : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle) { this._fontStyle = value; this.update(); }\n    /**\n     * The font variant.\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n\n    /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n    get fill(): FillInput\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillInput)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () =>\n            {\n                this._fill = toFillStyle(\n                    { ...this._originalFill as FillStyle },\n                    GraphicsContext.defaultFillStyle\n                );\n            });\n        }\n\n        this._fill = toFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): StrokeInput\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: StrokeInput)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () =>\n            {\n                this._stroke = toStrokeStyle(\n                    { ...this._originalStroke as StrokeStyle },\n                    GraphicsContext.defaultStrokeStyle\n                );\n            });\n        }\n\n        this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    protected _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this);\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this._generateKey();\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n\n    private _createProxy<T extends object>(value: T, cb?: (property: string, newValue: any) => void): T\n    {\n        return new Proxy<T>(value, {\n            set: (target, property, newValue) =>\n            {\n                target[property as keyof T] = newValue;\n                cb?.(property as string, newValue);\n                this.update();\n\n                return true;\n            }\n        });\n    }\n\n    private _isFillStyle(value: FillInput): value is FillStyle\n    {\n        return ((value ?? null) !== null\n            && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern));\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as TextStyleOptions & {\n        dropShadowAlpha?: number;\n        dropShadowAngle?: number;\n        dropShadowBlur?: number;\n        dropShadowColor?: number;\n        dropShadowDistance?: number;\n        fillGradientStops?: number[];\n        strokeThickness?: number;\n    };\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness !== undefined)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n        let obj: FillStyle = {};\n\n        // handles stroke: 0x0, stroke: { r: 0, g: 0, b: 0, a: 0 } stroke: new Color(0x0)\n        if (Color.isColorLike(color as ColorSource))\n        {\n            obj.color = color as ColorSource;\n        }\n        // handles stroke: new FillGradient()\n        else if (color instanceof FillGradient || color instanceof FillPattern)\n        {\n            obj.fill = color as FillGradient | FillPattern;\n        }\n        // handles stroke: { color: 0x0 } or stroke: { fill: new FillGradient() }\n        else if (Object.hasOwnProperty.call(color, 'color') || Object.hasOwnProperty.call(color, 'fill'))\n        {\n            obj = color as FillStyle;\n        }\n        else\n        {\n            throw new Error('Invalid stroke value.');\n        }\n\n        style.stroke = {\n            ...obj,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fillGradientStops))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        let fontSize: number;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style.fontSize == null)\n        {\n            style.fontSize = TextStyle.defaultTextStyle.fontSize;\n        }\n        else if (typeof style.fontSize === 'string')\n        {\n            // eg '34px' to number\n            fontSize = parseInt(style.fontSize as string, 10);\n        }\n        else\n        {\n            fontSize = style.fontSize as number;\n        }\n\n        const gradientFill = new FillGradient(0, 0, 0, fontSize * 1.7);\n\n        const fills: number[] = oldStyle.fillGradientStops\n            .map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fills.forEach((number, index) =>\n        {\n            const ratio = index / (fills.length - 1);\n\n            gradientFill.addColorStop(ratio, number);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n\n","import { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof text\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    private static readonly _measurementCache: Record<string, CanvasTextMetrics> = {};\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}:${style.styleKey}`;\n\n        // TODO - if we find this starts to go nuts with memory, we can remove the cache\n        // or instead just stick a usage tick that we increment each time we return it.\n        // if some are not used, we can just tidy them up!\n        if (CanvasTextMetrics._measurementCache[textKey]) return CanvasTextMetrics._measurementCache[textKey];\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // CanvasTextMetrics._measurementCache[textKey] = measurements;\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n","import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/FillTypes';\n\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D): string | CanvasGradient | CanvasPattern\n{\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).toHex();\n    }\n    else if (!fillStyle.fill)\n    {\n        // fancy set up...\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n\n        // create an inverted scale matrix..\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill;\n\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill;\n\n        if (fillGradient.type === 'linear')\n        {\n            const gradient = context.createLinearGradient(\n                fillGradient.x0,\n                fillGradient.y0,\n                fillGradient.x1,\n                fillGradient.y1\n            );\n\n            fillGradient.gradientStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n\n            return gradient;\n        }\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            const resolution = text.resolution ?? this._renderer.resolution;\n\n            const { width, height } = this._renderer.canvasText.getTextureSize(\n                text.text,\n                resolution,\n                text._style,\n            );\n\n            if (\n                // is only being used by this text:\n                this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1\n                // check the size of the text is the same po2\n                && width === gpuText.texture._source.width\n                && height === gpuText.texture._source.height\n            )\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, _instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', () =>\n        {\n            this.destroyRenderable(text);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n","import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n","import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n\n        context.scale(resolution, resolution);\n\n        const padding = style.padding * 2;\n\n        context.clearRect(0, 0, measured.width + 4 + padding, measured.height + 4 + padding);\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.globalAlpha = style._fill?.alpha ?? 1;\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { HTMLTextStyle } from '../../text-html/HtmlTextStyle';\nimport type { TextStyle } from '../TextStyle';\n\nconst valuesToIterateForKeys: Partial<keyof TextStyle | keyof HTMLTextStyle>[] = [\n    'align',\n    'breakWords',\n    'cssOverrides',\n    'fontVariant',\n    'fontWeight',\n    'leading',\n    'letterSpacing',\n    'lineHeight',\n    'padding',\n    'textBaseline',\n    'trim',\n    'whiteSpace',\n    'wordWrap',\n    'wordWrapWidth',\n    'fontFamily',\n    'fontStyle',\n    'fontSize',\n] as const;\n\n/**\n * Generates a unique key for the text style.\n * @param style - The style to generate a key for.\n * @returns the key for the style.\n */\nexport function generateTextStyleKey(style: TextStyle): string\n{\n    const key = [];\n\n    let index = 0;\n\n    for (let i = 0; i < valuesToIterateForKeys.length; i++)\n    {\n        const prop = `_${valuesToIterateForKeys[i]}`;\n\n        key[index++] = style[prop as keyof typeof style];\n    }\n\n    index = addFillStyleKey(style._fill, key as string[], index);\n    index = addStokeStyleKey(style._stroke, key as string[], index);\n    index = addDropShadowKey(style.dropShadow, key as string[], index);\n\n    return key.join('-');\n}\n\nfunction addFillStyleKey(fillStyle: ConvertedFillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = fillStyle.fill?.styleKey;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: ConvertedStrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n\nfunction addDropShadowKey(dropShadow: TextStyle['dropShadow'], key: (number | string)[], index: number)\n{\n    if (!dropShadow) return index;\n\n    key[index++] = dropShadow.alpha;\n    key[index++] = dropShadow.angle;\n    key[index++] = dropShadow.blur;\n    key[index++] = dropShadow.distance;\n    key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n\n    return index;\n}\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","ExtensionType","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","UPDATE_PRIORITY","LOW","stop","start","Ticker","shared","oldTicker","extensions","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","renderGroup","applyMatrix","localTransform","parentRenderGroup","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsPool","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","location","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_this$_activeFilterDa","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","colorTextureSource","renderTarget","rootRenderTarget","colorTexture","source","resolution","_resolution","padding","antialias","blendRequired","enabled","_renderer$backBuffer$","_renderer$backBuffer","Math","min","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","scale","fitBounds","pad","ceil","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","RendererType","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","batchSamplersUniformGroupHash","getBatchSamplersUniformGroup","maxTextures","batchSamplersUniformGroup","sampleValues","Int32Array","uTextures","size","isStatic","CanvasPool","canvasOptions","_canvasPool","create","enableFullScreen","_createCanvasAndContext","canvas","DOMAdapter","createCanvas","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","arguments","undefined","key","nextPow2","canvasAndContext","returnCanvasAndContext","GraphicsPipe","adaptor","State","for2d","_graphicsBatchesHash","_adaptor","validateRenderable","graphics","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","_didGraphicsUpdate","_rebuild","_addToBatcher","updateRenderable","batches","batcher","updateElement","destroyRenderable","_removeBatchForRenderable","isRenderable","getGpuContext","customShader","blendMode","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","color32BitToUniform","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BigPool","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","gpuBatchableMesh","_texture","gpuMesh","_ref","getAdjustedBlendModeBlend","_initMeshData","_mesh$_geometry$indic","_mesh$_geometry$posit","_initBatchableMesh","BatchableMesh","_uvUpdateId","_textureMatrixUpdateId","reset","packIndex","index","indicesOffset","packAttributes","float32View","uint32View","textureId","wt","textureIdAndRound","a","b","c","d","tx","ty","uvBuffer","getBuffer","uvs","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","abgr","_MeshGeometry","deprecation","v8_0_0","defaultOptions","shrinkToFit","shrinkBuffersToFit","Buffer","label","usage","BufferUsage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","_PlaneGeometry","super","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","vertex","header","main","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","_gpuProgram","_glProgram","compileHighShaderGpuProgram","bits","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTexture","uSampler","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","default2d","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_didTilingSpriteUpdate","_updateBatchableMesh","bindGroup","_tileTransform","_tilingSpriteData$sha","_initTilingSpriteData","slice","renderableData","addressMode","_applyAnchorToTexture","copyFrom","array","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","localUniformMSDFBit","end","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","AbstractBitmapFont","EventEmitter","chars","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","range","pages","applyFillAsTint","baseMeasurementFontSize","baseRenderedFontSize","font","pageTextures","distanceFieldRange","distanceFieldType","destroyTextures","emit","removeAllListeners","_this$chars$i$texture","page","resolveCharacters","result","j","item","Array","isArray","Error","concat","startCode","charCodeAt","endCode","i2","j2","String","fromCharCode","from","_DynamicBitmapFont","_dynamicOptions$skipK","_dynamicOptions$resol","_dynamicOptions$paddi","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentPageIndex","_skipKerning","dynamicOptions","_textureSize","textureSize","_mipmap","mipmap","clone","overrideFill","_fill","color","alpha","WHITE","fill","requestedFontSize","fontStringFromTextStyle","overrideSize","_stroke","_style","skipKerning","CanvasTextMetrics","measureFont","ensureCharacters","charList","char","includes","self","indexOf","pageData","_nextPage","textureSource","currentX","currentY","fontScale","widthScale","fontStyle","maxCharHeight","skipTexture","_style$dropShadow$dis","_style$dropShadow","_style$_stroke$width","_style$_stroke","metrics","measureText","paddedWidth","paddedHeight","max","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","Rectangle","_applyKerning","newChars","measureCache","first","second","c1","c2","amount","textureResolution","_setupContext","ImageSource","resource","alphaMode","autoGenerateMipmaps","_stroke$width","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","join","miterLimit","strokeStyle","getCanvasFillStyle","fillStyle","shadowOptions","rgb","Color","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_stroke$width2","text","fontProperties","strokeText","fillText","TextStyle","DynamicBitmapFont","getBitmapTextLayout","layoutData","offsetY","lines","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","nextWord","word","position","nextLine","lastChar","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","isEnd","charData","test","wordWrap","nextCharWidth","align","measurementData","line","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","fontCount","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","getFont","_dynamicFont$ensureCh","fontFamilyKey","styleKey","substring","lastIndexOf","Cache","has","fnt","once","dynamicFont","call","getLayout","bitmapFont","install","_options","_ref2","_ref3","_ref4","textStyle","flatChars","uninstall","cacheKey","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapTextLayout","_anchor","_x","_y","tint","round","initGpuText","proxyRenderable","Graphics","dx","sqrt","dy","worldScale","abs","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","htmlText","gpuText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","_htmlText$resolution","generatingTexture","getManagedTexture","onViewUpdate","gpuTextData","BatchableSprite","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","textStyleToCSS","cssStyleString","toHex","fontWeight","fontVariant","whiteSpace","breakWords","strokeToCSS","dropShadowToCSS","cssOverrides","cssStyles","tagStyles","out","tagStyle","cssTagStyle","transform","templates","replace","tagStyleToCSS","dropShadowStyle","setAlpha","toHexa","HTMLTextStyle","_this$cssOverrides","_options$tagStyles","_cssOverrides","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","cssStyle","addOverride","_len","_key","toAdd","v","removeOverride","_len2","_key2","toRemove","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","split","trim","extractFontFamilies","fontCSS","fontPromises","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","descenderPadding","measureHtmlText","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","initSource","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","_TextStyle","oldStyle","_oldStyle$dropShadowA","_oldStyle$dropShadowA2","_oldStyle$dropShadowB","_oldStyle$dropShadowC","_oldStyle$dropShadowD","defaults","defaultDropShadow","dropShadowAlpha","dropShadowAngle","dropShadowColor","obj","isColorLike","FillGradient","FillPattern","hasOwnProperty","fillGradientStops","parseInt","gradientFill","fills","toNumber","number","ratio","addColorStop","convertV7Tov8Style","fullStyle","_align","_breakWords","_dropShadow","_createProxy","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","leading","_leading","_letterSpacing","_lineHeight","_trim","_textBaseline","_whiteSpace","_wordWrap","_wordWrapWidth","_originalFill","_isFillStyle","GraphicsContext","defaultFillStyle","toFillStyle","_originalStroke","defaultStrokeStyle","toStrokeStyle","defaultStyle","_this$_fill","_this$_originalFill","_this$_stroke","_this$_originalStroke","destroyTextureSource","cb","Proxy","property","newValue","PI","contextSettings","willReadFrequently","_CanvasTextMetrics","experimentalLetterSpacingSupported","_experimentalLetterSpacingSupported","proto","getCanvasRenderingContext2D","prototype","lineWidths","maxLineWidth","_canvas","_measurementCache","__context","_measureText","strokeWidth","useExperimentalLetterSpacing","experimentalLetterSpacing","textLetterSpacing","graphemeSegmenter","cache","collapseSpaces","_collapseSpaces","collapseNewlines","_collapseNewlines","canPrependSpaces","tokens","_tokenize","token","_isNewline","_addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","_getFromCache","canBreakWords","characters","wordWrapSplit","k","nextChar","canBreakChars","characterWidth","isLastToken","newLine","_trimRight","_newlines","_nextChar","_breakingSpaces","_token","_char","_index","_fonts","_context","METRICS_STRING","BASELINE_SYMBOL","properties","actualBoundingBoxAscent","actualBoundingBoxDescent","clearMetrics","__canvas","OffscreenCanvas","ex","BASELINE_MULTIPLIER","HEIGHT_MULTIPLIER","_Intl","Intl","Segmenter","segmenter","s","segment","genericFontFamilies","fontSizeString","pattern","createPattern","setTransform","fillPattern","fillGradient","gradient","createLinearGradient","x0","y0","x1","y1","gradientStops","CanvasTextPipe","_text$resolution","canvasText","getTextureSize","textUid","checkRow","checkColumn","top","bottom","CanvasTextSystem","_textKey","createTextureAndCanvas","_options$resolution","renderTextToCanvas","trimmed","TypeError","getImageData","left","right","getCanvasBoundingBox","resetTransform","lineCap","cap","linePositionX","linePositionY","passesCount","_style$_stroke3","isShadowPass","dsOffsetText","dsOffsetShadow","toRgbaString","_style$_fill$alpha","_style$_fill","_style$_stroke2","globalAlpha","linePositionYShift","_style$_stroke4","_drawLetterSpacing","isStroke","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","valuesToIterateForKeys","prop","addFillStyleKey","alignment","addStokeStyleKey","addDropShadowKey","_fillStyle$fill","tempBounds"],"sourceRoot":""}